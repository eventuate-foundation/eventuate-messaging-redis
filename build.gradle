buildscript {
    repositories {
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
    }
}

apply plugin: 'docker-compose'

allprojects {
    group = "io.eventuate.messaging.redis"
}
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"


subprojects {
    apply plugin: 'java'

    sourceCompatibility = 17
    targetCompatibility = 17



    repositories {
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    dependencies {
        testImplementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
        testImplementation "org.mockito:mockito-core:4.11.0"
    }




}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP

        destinationDir file("$buildDir/docs/javadoc")
    }
}

dockerCompose {
    projectName = null
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}


